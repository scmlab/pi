# This is the complex Travis configuration, which is intended for use
# on open source libraries which need compatibility across multiple GHC
# versions, must work with cabal-install, and should be
# cross-platform. For more information and other options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: true

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - $TRAVIS_BUILD_DIR/.stack-work

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on macOS in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://get.haskellstack.org/stable/osx-x86_64.tar.gz | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://get.haskellstack.org/stable/linux-x86_64.tar.gz | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config


install:
- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
    stack)
      # Add in extra-deps for older snapshots, as necessary
      #
      # This is disabled by default, as relying on the solver like this can
      # make builds unreliable. Instead, if you have this situation, it's
      # recommended that you maintain multiple stack-lts-X.yaml files.

      #stack --no-terminal --install-ghc $ARGS test --bench --dry-run || ( \
      #  stack --no-terminal $ARGS build cabal-install && \
      #  stack --no-terminal $ARGS solver --update-config)

      # Build the dependencies
      stack --no-terminal --install-ghc $ARGS test --bench --only-dependencies
      ;;
    cabal)
      cabal --version
      travis_retry cabal update

      # Get the list of packages from the stack.yaml file. Note that
      # this will also implicitly run hpack as necessary to generate
      # the .cabal files needed by cabal-install.
      PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@')

      cabal install --only-dependencies --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES
      ;;
  esac
  set +ex

script:
- |
  set -ex
  case "$BUILD" in
    stack)
      stack --no-terminal $ARGS test --bench --no-run-benchmarks --haddock --no-haddock-deps
      ;;
    cabal)
      cabal install --enable-tests --enable-benchmarks --force-reinstalls --ghc-options=-O0 --reorder-goals --max-backjumps=-1 $CABALARGS $PACKAGES

      ORIGDIR=$(pwd)
      for dir in $PACKAGES
      do
        cd $dir
        cabal check || [ "$CABALVER" == "1.16" ]
        cabal sdist
        PKGVER=$(cabal info . | awk '{print $2;exit}')
        SRC_TGZ=$PKGVER.tar.gz
        cd dist
        tar zxfv "$SRC_TGZ"
        cd "$PKGVER"
        cabal configure --enable-tests --ghc-options -O0
        cabal build
        if [ "$CABALVER" = "1.16" ] || [ "$CABALVER" = "1.18" ]; then
          cabal test
        else
          cabal test --show-details=streaming --log=/dev/stdout
        fi
        cd $ORIGDIR
      done
      ;;
  esac
  set +ex

# locate the location of "pi"
before_deploy:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
        mv $(stack path --local-install-root)/bin/pi $(stack path --local-install-root)/bin/pi-osx-x64;
        sudo chmod a+rx $(stack path --local-install-root)/bin/pi-osx-x64;
        export BUILT_EXEC_PATH=$(stack path --local-install-root)/bin/pi-osx-x64;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then
        mv $(stack path --local-install-root)/bin/pi $(stack path --local-install-root)/bin/pi-linux-x64;
        sudo chmod a+rx $(stack path --local-install-root)/bin/pi-linux-x64;
        export BUILT_EXEC_PATH=$(stack path --local-install-root)/bin/pi-linux-x64;
    fi

deploy:
  provider: releases
  skip_cleanup: true
  api_key:
    secure: ZZK2g6XRiEeX2+j0SE/HIFbKOVRSOFD4LSnbZdYBuMc/X24QqhEZlfNsY9LZcyLtDaDzdvCrGyj6Izcf0HHzKRkkLptNZDtKbFbDcBPzZT8rp6oIMrbw6kGJjSkQ4af49D4A9xzYyOuxRv224oM4Y+hgZvr83l33fOlYgle9OpZYCZHBHK2PpacO7jMT5S+1SoRIx0l/Shgo4ZmzgRdaKmFRP1Vma82XcNxRk0cONyPRfMUj4LGqw163OdqnY3L6ccWqqnp6O3mDn7QOPbi7/RdqtGId/OQyUjXWZfXsmuGIWA9x+fQrcA3pZYx9t4mbK/I27kpmmrTPRwqaOldl5594RAtscrgZAGEopkx4VsbRKoVAdkr/ksw7a1DhVenyiUSv7Ql1UVfxHJreAjvmNUotcLxVphWLSlp9udgypmCX7nOekT3dKDAhbK2uQH7fYJQmFMO2rC/8rfoYr1gCsFU5KIztf0HFMuFZwdLQFaQfegql0TlSZZeQ1rsc6nQdno4+MRLVFF6NN0IpRKZVO3tCN0513MmSWAnrV/kJDUu6w50bBsXdS0kIBJlz4cJQ5WEZo04Yu8fUpB65Abx69Z7kn+ftLuHF0V/qZL0RKkkyufCBvjqAVN8h4uFtEYijhkfcsyUC8U1WHw2oTt0MNtAHPPBNYqU6fOCV4MStfBU=
  file_glob: true
  file:
    - "${BUILT_EXEC_PATH}"
  on:
    repo: scmlab/pi
    branch: release
